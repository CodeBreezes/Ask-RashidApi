using BookingAppAPI.DB;
using BookingAppAPI.DB.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Options;
using Stripe;
using Stripe.Checkout;

[Route("api/[controller]")]
[ApiController]
public class PaymentController : ControllerBase
{
    private readonly StripeSettings _stripeSettings;
    private readonly AppDbContext _context;

    public PaymentController(IOptions<StripeSettings> stripeOptions, AppDbContext context)
    {
        _stripeSettings = stripeOptions.Value;
        _context = context;
        StripeConfiguration.ApiKey = _stripeSettings.SecretKey;
    }

    [HttpPost("create-payment-intent")]
    public IActionResult CreatePaymentIntent([FromBody] Payment request)
    {
        if (request == null || request.Amount <= 0)
        {
            return BadRequest("Invalid payment request.");
        }

        var options = new PaymentIntentCreateOptions
        {
            Amount = request.Amount * 100, 
            Currency = request.Currency.ToLower(),
            PaymentMethodTypes = new List<string> { "card" },
            Description = $"Booking payment for {request.PhoneNumber}",
            Metadata = new Dictionary<string, string>
<<<<<<< Updated upstream
        {
            { "customerName", request.CustomerName ?? "Guest" },
           { "bookingId", request.BookingId.ToString() }

        }
=======
            {
                { "customerName", request.CustomerName ?? "Guest" },
                { "bookingId", request.BookingId ?? "" },
                { "email", request.Email ?? "" },
                { "phoneNumber", request.PhoneNumber }
            },
            ReceiptEmail = request.Email
>>>>>>> Stashed changes
        };

        var service = new PaymentIntentService();
        var intent = service.Create(options);

        return Ok(new
        {
            clientSecret = intent.ClientSecret
        });
    }

    [HttpPost("stripe-webhook")]
    public async Task<IActionResult> StripeWebhook()
    {
        var json = await new StreamReader(HttpContext.Request.Body).ReadToEndAsync();

        try
        {
            var stripeEvent = EventUtility.ConstructEvent(
                json,
                Request.Headers["Stripe-Signature"],
                _stripeSettings.WebhookSecret
            );

            if (stripeEvent.Type == "payment_intent.succeeded")
            {
                var intent = stripeEvent.Data.Object as PaymentIntent;

                if (intent != null)
                {
                    var metadata = intent.Metadata;

                    var payment = new Payment
                    {
                        StripePaymentIntentId = intent.Id,
                        Amount = intent.Amount,
                        Currency = intent.Currency,
                        PhoneNumber = metadata.ContainsKey("phoneNumber") ? metadata["phoneNumber"] : "",
                        BookingId = metadata.ContainsKey("bookingId") ? metadata["bookingId"] : null,
                        CustomerName = metadata.ContainsKey("customerName") ? metadata["customerName"] : "Guest",
                        Email = metadata.ContainsKey("email") ? metadata["email"] : intent.ReceiptEmail ?? "",
                        CreatedAt = DateTime.UtcNow
                    };

                    _context.Payments.Add(payment);
                    await _context.SaveChangesAsync();
                }
            }

            return Ok();
        }
        catch (StripeException ex)
        {
            Console.WriteLine($"Stripe webhook error: {ex.Message}");
            return BadRequest();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Webhook error: {ex.Message}");
            return BadRequest();
        }
    }
    [HttpPost("save-payment")]
    public async Task<IActionResult> SavePayment([FromBody] Payment payment)
    {
        if (payment == null || payment.Amount <= 0 || string.IsNullOrEmpty(payment.PhoneNumber))
        {
            return BadRequest("Invalid payment data.");
        }

        // Set CreatedAt if not set
        if (payment.CreatedAt == default)
        {
            payment.CreatedAt = DateTime.UtcNow;
        }

        _context.Payments.Add(payment);
        await _context.SaveChangesAsync();

        return Ok(new
        {
            message = "Payment saved successfully.",
            paymentId = payment.Id,
            paymentIntentId = payment.StripePaymentIntentId
        });
    }

    [HttpGet("get-all-stripe-payments")]
    public IActionResult GetAllStripePayments()
    {
        try
        {
            var service = new PaymentIntentService();

            var options = new PaymentIntentListOptions
            {
                Limit = 20 
            };

            StripeList<PaymentIntent> paymentIntents = service.List(options);

            var payments = paymentIntents.Select(intent => new
            {
                Id = intent.Id,
                Amount = intent.Amount,
                Currency = intent.Currency,
                Status = intent.Status,
                CustomerName = intent.Metadata.ContainsKey("customerName") ? intent.Metadata["customerName"] : "Unknown",
                PhoneNumber = intent.Metadata.ContainsKey("phoneNumber") ? intent.Metadata["phoneNumber"] : "",
                BookingId = intent.Metadata.ContainsKey("bookingId") ? intent.Metadata["bookingId"] : "",
                Email = intent.Metadata.ContainsKey("email") ? intent.Metadata["email"] : intent.ReceiptEmail,
                Created = intent.Created
            });

            return Ok(payments);
        }
        catch (StripeException ex)
        {
            return StatusCode(500, $"Stripe error: {ex.Message}");
        }
        catch (Exception ex)
        {
            return StatusCode(500, $"Server error: {ex.Message}");
        }
    }

    [HttpGet("get-payment-by-bookingid/{bookingId}")]
    public IActionResult GetPaymentByBookingId(string bookingId)
    {
        try
        {
            var service = new PaymentIntentService();
            var options = new PaymentIntentListOptions
            {
                Limit = 100 // Adjust as needed
            };

            var paymentIntents = service.List(options);

            var payment = paymentIntents.FirstOrDefault(intent =>
                intent.Metadata.ContainsKey("bookingId") &&
                intent.Metadata["bookingId"].Equals(bookingId, StringComparison.OrdinalIgnoreCase)
            );

            if (payment == null)
            {
                return NotFound($"No Stripe payment found for booking ID: {bookingId}");
            }

            var result = new
            {
                payment.Id,
                payment.Amount,
                payment.Currency,
                payment.Status,
                CustomerName = payment.Metadata.ContainsKey("customerName") ? payment.Metadata["customerName"] : "Unknown",
                Email = payment.Metadata.ContainsKey("email") ? payment.Metadata["email"] : payment.ReceiptEmail,
                PhoneNumber = payment.Metadata.ContainsKey("phoneNumber") ? payment.Metadata["phoneNumber"] : "",
                BookingId = bookingId,
                payment.Created
            };

            return Ok(result);
        }
        catch (StripeException ex)
        {
            return StatusCode(500, $"Stripe error: {ex.Message}");
        }
        catch (Exception ex)
        {
            return StatusCode(500, $"Server error: {ex.Message}");
        }
    }

    [HttpGet("get-payments-by-phone/{phoneNumber}")]
    public async Task<IActionResult> GetPaymentsByPhoneNumber(string phoneNumber)
    {
        if (string.IsNullOrWhiteSpace(phoneNumber))
            return BadRequest("Phone number is required.");

        try
        {
            var payments = await _context.Payments
                .Where(p => p.PhoneNumber == phoneNumber)
                .OrderByDescending(p => p.CreatedAt)
                .ToListAsync();

            if (payments == null || !payments.Any())
                return NotFound($"No payments found for phone number: {phoneNumber}");

            return Ok(payments);
        }
        catch (Exception ex)
        {
            return StatusCode(500, $"Server error: {ex.Message}");
        }
    }

}
